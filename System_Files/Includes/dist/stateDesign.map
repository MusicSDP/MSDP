{"version":3,"sources":["node_modules/uuid/lib/rng.js","node_modules/uuid/lib/bytesToUuid.js","node_modules/uuid/v1.js","stateDesign.js"],"names":["uuidv1","require","debug","log","output","Max","post","defaultSystem","state","system","project","session","addHandler","type","v","v2","add","remove","v3","v4","v5","update","loc","val","dest","dest2","copy","getFromMax","path","importer","v1","exporter","title","newProject","loadProject","JSON","stringify","map","outlet","created","Date","settings","defaultSettings","openBoards","savedBoards","sessionBoards","boardPointers","error","bigRandStr","proto","hasOwnProperty","push","length","i","index","modules","assets","b","splice","open","a","asset","e","eval","Object","defineProperty","getOwnPropertyDescriptor","i2","clone","parse","removeList","m","sort","n","c","saved","cloneModules","id","p","substring","lastIndexOf","systemBoard","savedBoardList","openBoardList","uName","key","isEmpty","lastUpdated","mode","fs","writeFileSync","existsSync","unlinkSync","renameSync","appState","major","dev","autoUpdate","msdp","lastOpened","Math","floor","random","toString","obj"],"mappings":"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","file":"stateDesign.map","sourceRoot":"..","sourcesContent":["// Unique ID creation requires a high quality random # generator.  In node.js\n// this is pretty straight-forward - we use the crypto API.\n\nvar crypto = require('crypto');\n\nmodule.exports = function nodeRNG() {\n  return crypto.randomBytes(16);\n};\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","//comment lines 2-4 out when building the parcel package. Then copy-paste the lines into the beginning of the package\r\n// const Max = require('max-api')\r\n// const path = require('path')\r\n// const fs = require('fs')\r\nconst uuidv1 = require('uuid/v1')\r\n\r\nlet debug = false\r\nlet log = (output) => { if (debug) Max.post(output) }\r\nlet defaultSystem = {\r\n  \"uName\": null,\r\n  \"appState\": { \"major\": null, \"minor\": null, \"revision\": null, \"state\": null },\r\n  \"os\": \"Windows\", \"autoUpdate\": null, \"vidFPS\": 2, \"recFPS\": 1,\r\n  \"io\": { \"driver\": null, \"in\": null, \"out\": null, \"sampleRate\": null, \"ioVector\": null, \"sigVector\": null },\r\n  \"defaultSettings\": { \"dac\": 1, \"limiter\": 1, \"volume\": 127, \"fullScreen\": 1, \"metroTog\": 1, \"bpm\": 120, \"showBoards\": 1, \"initEvent\": 0, \"keyboardMIDI\": false, \"keyOctave\": 4, \"recType\": 0, \"vWidth\": 320, \"vHeight\": 320, \"vChan\": 1 }\r\n}\r\nlet state = {\r\n  system: defaultSystem,\r\n  project: {\r\n    \"title\": null, \"created\": null, \"lastOpened\": null, \"lastUpdated\" : null, \"path\": null, \"settings\": {}, \"openBoards\": [], \"savedBoards\": [],\r\n    \"systemBoard\": {\"metroSettings\": {\"bpm\": 120,\"bpMeasure\": 4,\"tick\": 0,\"customDiv\": 5}, \"virtualControllers\": {\"keyboard\": 0,\"slider\": 0,\"pads\": 0}}\r\n  }\r\n}\r\nlet session = { \"sessionBoards\": [], \"boardPointers\": {} }\r\n\r\n// collection of Max handlers - messages from Max that run functions\r\n// Max.addHandler(\"updateCheck\", () => {updateCheck()})\r\nMax.addHandler(\"add\", (type, v, v2) => {add(type, v, v2)})\r\nMax.addHandler(\"remove\", (type, v, v2) => {remove(type, v, v2)})\r\nMax.addHandler(\"update\", (type, v, v2, v3, v4, v5) => {update(type, v, v2, v3, v4, v5)})\r\nMax.addHandler(\"copy\", (loc, val, dest, dest2) => {copy(loc, val, dest, dest2)})\r\nMax.addHandler(\"get\", (type, v, v2) => {getFromMax(type, v, v2)})\r\nMax.addHandler(\"import\", (type, path) => {importer(type, path)})\r\nMax.addHandler(\"export\", (type, v1, v2) => {exporter(type, v1, v2)})\r\nMax.addHandler(\"newProject\", (title, path) => {newProject(title, path)})\r\nMax.addHandler(\"loadProject\", (path) => { loadProject(path);});\r\nMax.addHandler(\"projectOut\", () => { // send project dict to dict viewer patch\r\n  [\"sendTo MSDP_View_Dict_State\", \"sendGate 1\", JSON.stringify(state, null, 4), \"sendGate 0\" ].map(Max.outlet);\r\n});\r\nMax.addHandler(\"sessionOut\", () => { // send session dict to dict viewer patch\r\n  [\"sendTo MSDP_View_Dict_Session\", \"sendGate 1\", JSON.stringify(session, null, 4), \"sendGate 0\" ].map(Max.outlet);\r\n});\r\nMax.addHandler(\"debug\", (v) => {debug = v; Max.post(`debug mode ${v}`)});\r\n\r\nconst newProject = (title, path) => { // blank out project and session dictionaries to begin new project\r\n  try {\r\n    state.project.title = title;\r\n    state.project.created = new Date();\r\n    state.project.settings = state.system.defaultSettings;\r\n    state.project.openBoards = state.project.savedBoards = session.sessionBoards = [];\r\n    session.boardPointers = {};\r\n    exporter('project', path);\r\n    getFromMax(\"pSettings\");\r\n    [\"sendTo MSDP_newboard_load\", \"sendGate 1\", \"bang\", \"sendGate 0\" ].map(Max.outlet);\r\n    [\"sendTo MSDP_System_Board_Audio_Path\", 'sendGate 1', 'bang', 'sendGate 0'].map(Max.outlet);\r\n  }\r\n  catch(error) { log(error) }\r\n}\r\nconst loadProject = (path) => { // load the project state\r\n  try {\r\n    importer(\"project\", path)\r\n    getFromMax(\"pSettings\")\r\n    getFromMax(\"list\", \"savedBoards\")\r\n    getFromMax(\"list\", \"openBoards\"); // for some reason, removing the semi-colon here breaks everything!\r\n    ['sendTo MSDP_System_Board_Audio_Path', 'sendGate 1', 'bang', 'sendGate 0'].map(Max.outlet)\r\n  }\r\n  catch(error) { log(error) }\r\n}\r\nconst add = (type, v, v2) => { // named boards, modules, assets\r\n  try {\r\n    var rand = bigRandStr();\r\n    if (type === 'board') {\r\n      let proto = v;\r\n      if (v === 'undefined') v = 'Board_' + bigRandStr()\r\n      if (session.boardPointers.hasOwnProperty(v) === true) v =+ bigRandStr()\r\n      session.sessionBoards.push({ \"title\": v, \"position\": null, \"power\": 1, 'saved': 0, \"modules\": [] })\r\n      session.boardPointers[v] = {'index': session.sessionBoards.length-1, 'proto': proto, \"open\": 1, 'modules': {}}\r\n      return(v)\r\n    }\r\n    else if (type === 'module') {\r\n      i = session.boardPointers[v].index\r\n      session.sessionBoards[i].modules.push({ \"location\": \"1 1\", \"process\": \"Choose One\", \"id\": v2, \"parameters\": {}})\r\n      session.boardPointers[v].modules[v2] = {'index': session.sessionBoards[i].modules.length-1, 'open': 1, 'id': v2}\r\n    }\r\n    else if (type === 'asset') {\r\n      state.project.assets[v].push(v2)\r\n      log(` ${v2} added to the ${v} list`)\r\n    }\r\n  }\r\n  catch(error) { log(error) }\r\n}\r\n\r\nconst remove = (type, v, v2) => { // named boards, modules, assets\r\n  if (type === 'savedBoard') {\r\n    for (b in state.project.savedBoards) {\r\n      if(state.project.savedBoards[b].title === v) {\r\n        state.project.savedBoards.splice(b, 1)\r\n        log(`board ${v} removed from saved board list`)\r\n        return\r\n      }\r\n    }\r\n    log(`board ${v} not found in saved board list`)\r\n  }\r\n  else if (type === 'openBoard') session.boardPointers[v].open = 0\r\n  else if (type === 'module') session.boardPointers[v]['modules'][v2].open = 0\r\n  else if (type === 'asset') { // remove an asset from the asset list\r\n      for (a in state.project.assets[v]) {\r\n        if(state.project.assets[v][a] === v2) {\r\n          state.project.assets[v].splice(a, 1)\r\n          log(`${v2} at ${v} removed`)\r\n          return\r\n        }\r\n      }\r\n      log(`${asset} in ${type} not found`)\r\n  }\r\n}\r\n\r\nconst update = (type, v, v2, v3, v4, v5) => { // system, project,board, module.\r\n  try {\r\n    if (type === 'value'){\r\n      typeof v2 === 'number' ? e = 'state' + '.' + v + ' = ' + v2 + ';' : e = 'state' + '.' + v + ' = \"' + v2 + '\";'\r\n      log(`update: ${e}`)\r\n      eval(e)\r\n    }\r\n    else if (type === 'board') { //update board value other than modules\r\n      let i = session.boardPointers[v].index\r\n      if(v2 === 'title'){\r\n        if(session.boardPointers.hasOwnProperty(v3) === true) v3 =+ '_' + bigRandStr()\r\n        Object.defineProperty(session.boardPointers, v3, Object.getOwnPropertyDescriptor(session.boardPointers, v))\r\n        delete session.boardPointers[v]\r\n        session.boardPointers[v3].proto = v3\r\n      }\r\n      session.sessionBoards[i][v2] = v3;\r\n      log(`board ${v} ${v2} set to ${v3}`);\r\n    }\r\n    else if (type === 'module'){ //update a module on a board\r\n      let i = session.boardPointers[v]['index'];\r\n      let i2 = session.boardPointers[v]['modules'][v2]['index'];\r\n      if (v3 === 'id') session.boardPointers[v]['modules'][v2]['id'] = v4\r\n      session.sessionBoards[i].modules[i2][v3] = v4\r\n      log(`module ${v2} on board ${v} value ${v3} set to ${v4}`)\r\n    }\r\n    else if (type === 'parameter'){ // update a parameter in a module on a board\r\n      var i = session.boardPointers[v]['index']\r\n      var i2 = session.boardPointers[v]['modules'][v2]['index']\r\n      session.sessionBoards[i]['modules'][i2]['parameters'][v3] = v4\r\n    }\r\n  }\r\n  catch(error) {\r\n    log(error)\r\n  }\r\n}\r\n\r\nconst copy = (loc, val, dest, dest2) => { // session to open, session to saved, open to session, saved to session\r\n  try {\r\n    if (loc === 'session') {\r\n      let index = session.boardPointers[val].index\r\n      let proto = session.boardPointers[val].proto\r\n      let clone = JSON.parse(JSON.stringify(session.sessionBoards[index]))\r\n      clone.title = proto\r\n      let removeList = []\r\n      for (let m in session.boardPointers[val]['modules']) if (session.boardPointers[val]['modules'][m]['open'] === 0) removeList.push(session.boardPointers[val]['modules'][m]['index'])\r\n      removeList.sort(function(a, b){return b-a});\r\n      for (let n in removeList) clone['modules'].splice(removeList[n], 1)\r\n      if (dest === 'open') {\r\n        if (proto != val) {\r\n          if (session.boardPointers.hasOwnProperty(proto) === true) {\r\n            if(session.boardPointers[proto].open === 1) clone.title = val\r\n          }\r\n        }\r\n        state.project.openBoards.push(clone)\r\n      }\r\n      else if (dest === 'saved') {\r\n        session.sessionBoards[index].saved = 1;\r\n        clone.saved = 1;\r\n          for (var c in state.project.savedBoards) {\r\n            if(state.project.savedBoards[c]['title'] === proto) {\r\n              log(`Board ${proto} updated`)\r\n              state.project.savedBoards.splice(c, 1, clone)\r\n              return\r\n            }\r\n          }\r\n        log(`Board ${val} added to saved list`)\r\n        state.project.savedBoards.push(clone)\r\n        }\r\n    }\r\n    else if (loc === 'saved') {\r\n      let clone\r\n      let cloneModules = {}\r\n      for (b in state.project.savedBoards){\r\n        if(state.project.savedBoards[b]['title'] === val) {\r\n          clone = state.project.savedBoards[b]\r\n          for (var m in clone.modules){\r\n            let modName = clone.modules[m].id\r\n            cloneModules[modName] = { 'index': m,'open': 1 }\r\n          }\r\n        }\r\n      }\r\n      if (session.boardPointers.hasOwnProperty(val) === true) clone.title =+ bigRandStr()\r\n      session.boardPointers[clone.title] = {'index': session.sessionBoards.length, 'proto': val, \"open\": 1, 'modules': cloneModules}\r\n      session.sessionBoards.push(clone)\r\n      log(`Board ${clone.title} added to session`);\r\n    }\r\n    else if (loc === 'open') { // copy saved open board into session\r\n      let clone\r\n      let cloneModules = {}\r\n      for (b in state.project.openBoards){\r\n        if (state.project.openBoards[b].title === val) {\r\n          clone = state.project.openBoards[b]\r\n          for (let m in clone.modules){\r\n            let modName = clone.modules[m].id;\r\n            cloneModules[modName] = {'index': m,'open': 1}\r\n          }\r\n        }\r\n      }\r\n      if (session.boardPointers.hasOwnProperty(val) === true) clone.title =+ bigRandStr()\r\n      session.boardPointers[clone.title] = {'index': session.sessionBoards.length, 'proto': val, \"open\": 1, 'modules': cloneModules}\r\n      session.sessionBoards.push(clone)\r\n      log(`Board ${clone.title} added to session`)\r\n    }\r\n  }\r\n  catch(error) {\r\n    log(error)\r\n  }\r\n}\r\n\r\nconst getFromMax = (type, v, v2) => { // data from state to max\r\n  try {\r\n    if (type === 'path'){ // get the project path\r\n        let p = state.project.path\r\n        p = p.substring(0, p.lastIndexOf(\"/\"))\r\n        Max.outlet (\"sendTo MDSP_Backup_pPath\"); Max.outlet (\"sendGate 1\"); Max.outlet (p); Max.outlet (\"sendGate 0\"); // .map added index number and dictionary after. Discuss with Dirk\r\n    }\r\n    else if (type === 'system') [\"sendTo MSDP_System_Settings_Set\", \"sendGate 1\", JSON.stringify(state.system, null, 4), \"sendGate 0\" ].map(Max.outlet)\r\n    else if ( type === 'pSettings') [\"sendTo MSDP_Project_Settings_Set\", \"sendGate 1\", JSON.stringify(state.project.settings, null, 4), \"sendGate 0\", \"sendTo MSDP_Metro_Settings_Set\", \"sendGate 1\", JSON.stringify(state.project.systemBoard, null, 4), \"sendGate 0\" ].map(Max.outlet)\r\n    else if ( type === 'pSysBoard'){\r\n      if (v === \"virtual\") [\"sendTo MSDP_Virtual_Settings_Set\", \"sendGate 1\", JSON.stringify(state.project.systemBoard, null, 4), \"sendGate 0\" ].map(Max.outlet)\r\n    }\r\n    else if (type === 'list'){ // determine whether asking for a list of boards or modules off a board\r\n      if (v === 'savedBoards') {\r\n        if (v2 === \"meta\") Max.outlet(\"sendTo MSDP_Saved_Boards_List_Meta\")\r\n        else if (v2 === \"deleted\") Max.outlet(\"sendTo MSDP_Deleted_Boards_List\")\r\n        else Max.outlet(\"sendTo MSDP_Saved_Boards_List\")\r\n        Max.outlet(\"sendGate 1\")\r\n        for (b in state.project.savedBoards) {\r\n          let savedBoardList = []\r\n          savedBoardList.push(state.project.savedBoards[b].title)\r\n          Max.outlet(savedBoardList)\r\n        }\r\n        Max.outlet(\"sendGate 0\")\r\n      }\r\n      else if (v === 'openBoards') {\r\n        [\"sendTo MSDP_Open_Board_List_Load\", \"sendGate 1\"].map(Max.outlet)\r\n        for (b in state.project.openBoards){\r\n          let openBoardList = []\r\n          openBoardList.push(state.project.openBoards[b]['title'])\r\n          Max.outlet(openBoardList)\r\n        }\r\n        Max.outlet (\"sendGate 0\")\r\n      }\r\n    }\r\n    else if (type === 'board'){\r\n      let path\r\n      let title = v2\r\n      if (v === 'open') path = state.project.openBoards\r\n      else if (v === 'saved') {\r\n          path = state.project.savedBoards\r\n          title = add(\"board\", v2)\r\n      }\r\n      for (b in path) {\r\n        if (path[b]['title'] === v2){\r\n          [\"sendTo \" + v2, \"sendGate 1\", \"title \" + title, JSON.stringify(path[b], null, 4), \"sendGate 0\" ].map(Max.outlet)\r\n          return\r\n        }\r\n      }\r\n      log(`${v2} not found`);\r\n    }\r\n  }\r\n  catch(error) {\r\n    log(error)\r\n  }\r\n}\r\n\r\nconst exporter = (type, v1, v2) => { // system, project, backup, analytics\r\n  // try {\r\n    let path, output\r\n    if (type === 'home') { //send all information out\r\n      Max.outlet (\"uname \" + JSON.stringify(state.system.uName, null, 4))\r\n      state.project.openBoards = []\r\n      for (let key in session.boardPointers) {\r\n        if (session.boardPointers.hasOwnProperty(key)) if (session.boardPointers[key]['open'] === 1) if (isEmpty(session.boardPointers[key].modules) === false ) copy('session', key, 'open')\r\n      }\r\n      state.project.lastUpdated = new Date()\r\n      // Max.outlet (\"stateOut \" + JSON.stringify(state, null, 4))\r\n      Max.outlet('sendTo MSDP_State_Information_Out')\r\n      Max.outlet('sendGate 1')\r\n      Max.outlet(JSON.stringify(state, null, 4))\r\n      Max.outlet('sendGate 0')\r\n      return\r\n    }\r\n    else if (type === 'system') { //export system info\r\n      if (state.system.uName === null){\r\n        state.system.uName = uuidv1()\r\n        Max.outlet (\"uname \" + JSON.stringify(state.system.uName, null, 4))\r\n      }\r\n      path = v1\r\n      output = state.system\r\n    }\r\n    else if (type === 'project') { //export project info\r\n      state.project.openBoards = []\r\n      for (let key in session.boardPointers) {\r\n        if (session.boardPointers.hasOwnProperty(key)) if (session.boardPointers[key].open === 1) if (isEmpty(session.boardPointers[key].modules) === false ) copy('session', key, 'open')\r\n      }\r\n      state.project.lastUpdated = new Date()\r\n      path = v1\r\n      output = state.project\r\n    }\r\n    else if (type === 'board') {\r\n      path = v2\r\n      output = session.sessionBoards[session.boardPointers[v1].index]\r\n      let removeList = []\r\n      for (let m in session.boardPointers[v1].modules) if (session.boardPointers[v1].modules[m].open === 0) removeList.push(session.boardPointers[v1].modules[m].index)\r\n      removeList.sort(function(a, b){return b-a})\r\n      for (let n in removeList) mode['modules'].splice(n+1, 1)\r\n    }\r\n    fs.writeFileSync(path+\".temp\", JSON.stringify(output, null, 4))\r\n    let fileCheck = fs.existsSync(path)\r\n    if (fileCheck == 1) fs.unlinkSync(path)\r\n    fs.renameSync(path+\".temp\", path)\r\n    log(`JSON write ${path}`)\r\n  // }\r\n  // catch(error){ log(error) }\r\n}\r\n\r\nconst importer = (type, path) => { // system, project, backup\r\n  try {\r\n    let clone = require(path) // should check if exists, if not, make\r\n    log(`JSON read ${path}`)\r\n    if (type === 'system'){\r\n      if (fs.existsSync(path)) {\r\n        state.system = clone\r\n        if (state.system.appState.major === 1 ) {\r\n          let uName = state.system.uName\r\n          state.system = defaultSystem\r\n          state.system.uName = uName\r\n          exporter('system', path)\r\n        }\r\n        if (state.system.dev === true) {Max.outlet (\"dev 1\")}\r\n        if (state.system.autoUpdate === null) { [\"sendTo MSDP_AutoUpdate_Window_Confirm\", \"sendGate 1\", \"open\", \"sendGate 0\" ].map(Max.outlet) }\r\n        Max.outlet (\"uname \" + JSON.stringify(state.system.uName, null, 4))\r\n        if (typeof state.system.defaultSettings == \"undefined\") {\r\n          state.system.defaultSettings = state.system.settings\r\n          delete state.system.settings\r\n        }\r\n      }\r\n      else { // if not initialized, make system file\r\n        state.system = defaultSystem\r\n        exporter('system', path)\r\n        [\"sendTo MSDP_AutoUpdate_Window_Confirm\", \"sendGate 1\", \"open\", \"sendGate 0\" ].map(Max.outlet)\r\n      }\r\n    }\r\n    else if (type === 'backup'){ // load a saved project\r\n      session.sessionBoards = [];\r\n      session.boardPointers = {};\r\n      msdp.project = clone;\r\n      log(1, 'last save ' + msdp.project.title + ' loaded');\r\n    }\r\n    else if (type === 'project'){\r\n      session.sessionBoards = [], session.boardPointers = {}\r\n      state.project = clone\r\n      state.project.lastOpened = new Date(), state.project.lastUpdated = new Date()\r\n      log(`project ${state.project.title} loaded`)\r\n    }\r\n    else if (type === 'board'){\r\n      let cloneModules = {}\r\n      for (let m in clone.modules) cloneModules[clone.modules[m].id] = {'index': m,'open': 1}\r\n      if (session.boardPointers.hasOwnProperty(clone.title) === true) clone.title =+ bigRandStr()\r\n      session.boardPointers[clone.title] = {'index': session.sessionBoards.length, 'proto': clone.title, \"open\": 1, 'modules': cloneModules}\r\n      session.sessionBoards.push(clone)\r\n      log(`board ${clone.title} imported into session`)\r\n      getFromMax('board', 'session', clone.title)\r\n    }\r\n    else if (type === 'system') {\r\n      state.system = clone\r\n    \tlog(`JSON Read ${path}`)\r\n    }\r\n  }\r\n  catch(error) { log(error) }\r\n}\r\n\r\nconst bigRandStr = () => Math.floor(Math.random() * 4294967295).toString(16)\r\n\r\nconst isEmpty = (obj) => {\r\n  for (let key in obj) if (obj.hasOwnProperty(key)) return false\r\n  return true\r\n};\r\n"]}